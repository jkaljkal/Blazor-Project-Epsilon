@page "/customers"
@using BlazorApp.Models
@using BlazorApp.Models.DTO
@inject HttpClient Http

<PageTitle>Customers</PageTitle>

<h1>Customers Grid</h1>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<Grid TItem="Customer"
      Class="table table-hover table-bordered table-striped"
      DataProvider="CustomersDataProvider"
      AllowPaging="true"
      PageSize="3"
      AllowSorting="true"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="Customer" HeaderText="Company" PropertyName="CompanyName">
            @context.CompanyName
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="Contact" PropertyName="ContactName">
            @context.ContactName
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="Address" PropertyName="Address">
            @context.Address
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="City" PropertyName="City">
            @context.City
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="Region" PropertyName="Region">
            @context.Region
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="Country" PropertyName="Country">
            @context.Country
        </GridColumn>
        <GridColumn TItem="Customer" HeaderText="Phone" PropertyName="Phone">
            @context.Phone
        </GridColumn>
    </GridColumns>
</Grid>

@code {
    private string errorMessage;
    private string baseApiUrl = "https://localhost:7018";

    private async Task<GridDataProviderResult<Customer>> CustomersDataProvider(GridDataProviderRequest<Customer> request)
    {
        try
        {
            var query = $"?pageNumber={request.PageNumber}&pageSize={request.PageSize}";
            var url = $"api/customer/paginated{query}";

            var response = await Http.GetAsync(url);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Error: {response.StatusCode}";
                return new GridDataProviderResult<Customer> { Data = new List<Customer>(), TotalCount = 0 };
            }

            var result = await response.Content.ReadFromJsonAsync<PagedResultDto<Customer>>();
            return new GridDataProviderResult<Customer>
                {
                    Data = result?.Items ?? new List<Customer>(),
                    TotalCount = result?.TotalCount ?? 0
                };
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load: {ex.Message}";
            return new GridDataProviderResult<Customer> { Data = new List<Customer>(), TotalCount = 0 };
        }
    }
}